generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Operator {
  operatorId Int      @id @default(autoincrement())
  username   String   @unique
  name       String
  password   String
  type       UserType @default(USER)
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lobby   Lobby? @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int?

  access         Access[]
  scheduling     Scheduling[]
  lobbyProblem   LobbyProblem[]
  logging        Logging[]
  schedulingList SchedulingList[]
}

model Lobby {
  lobbyId      Int       @id @default(autoincrement())
  cnpj         String
  name         String
  responsible  String
  telephone    String
  schedules    String
  procedures   String?   @db.VarChar(2000)
  datasheet    String?
  cep          String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String?
  code         Int?
  type         LobbyType
  exitControl  Status    @default(ACTIVE)
  protection   Status    @default(INACTIVE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  ControllerBrand   ControllerBrand? @relation(fields: [controllerBrandId], references: [controllerBrandId])
  controllerBrandId Int?

  member         Member[]
  scheduling     Scheduling[]
  access         Access[]
  lobbyProblem   LobbyProblem[]
  lobbyCalendar  LobbyCalendar[]
  device         Device[]
  visitor        Visitor[]
  vehicle        Vehicle[]
  schedulingList SchedulingList[]
  areaAccessRule AreaAccessRule[]
  accessRule     AccessRule[]
  group          Group[]
  timeZone       TimeZone[]
  timeSpan       TimeSpan[]
  operator       Operator[]
}

model Member {
  memberId            Int          @id @default(autoincrement())
  type                MemberType
  profileUrl          String?      @db.VarChar(255)
  documentUrl         String?      @db.VarChar(255)
  name                String
  rg                  String
  cpf                 String
  email               String?
  comments            String?      @db.VarChar(1000)
  status              Status       @default(ACTIVE)
  // ACCESS
  faceAccess          String?
  biometricAccess     String?
  remoteControlAccess String?
  passwordAccess      String?
  // RESIDENT
  address             String?
  addressType         AddressType? @relation(fields: [addressTypeId], references: [addressTypeId])
  addressTypeId       Int?
  // EMPLOYEE
  accessPeriod        String?
  position            String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  // WHERE IS THE MEMBER
  lobby               Lobby        @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId             Int

  tag            Tag[]
  scheduling     Scheduling[]
  telephone      Telephone[]
  vehicle        Vehicle[]
  access         Access[]
  schedulingList SchedulingList[]
  MemberGroup    MemberGroup[]
}

model Telephone {
  telephoneId Int    @id @default(autoincrement())
  number      String

  member   Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  memberId Int
}

model TagType {
  tagTypeId   Int    @id @default(autoincrement())
  description String

  tag Tag[]
}

model Tag {
  tagId    Int     @id @default(autoincrement())
  value    String
  comments String? @db.VarChar(1000)
  status   Status  @default(ACTIVE)

  type      TagType @relation(fields: [tagTypeId], references: [tagTypeId])
  tagTypeId Int

  member   Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  memberId Int
}

model VehicleType {
  vehicleTypeId Int    @id @default(autoincrement())
  description   String

  vehicle Vehicle[]
}

model Vehicle {
  vehicleId    Int     @id @default(autoincrement())
  licensePlate String
  brand        String?
  model        String?
  color        String?
  tag          String?
  comments     String? @db.VarChar(1000)

  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [vehicleTypeId])
  vehicleTypeId Int

  member   Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  memberId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId], onDelete: Cascade)
  lobbyId Int
}

model AddressType {
  addressTypeId Int    @id @default(autoincrement())
  description   String

  member Member[]
}

model VisitorType {
  visitorTypeId Int    @id @default(autoincrement())
  description   String

  visitor Visitor[]
}

model Visitor {
  visitorId   Int       @id @default(autoincrement())
  profileUrl  String?   @db.VarChar(255)
  documentUrl String?   @db.VarChar(255)
  name        String
  rg          String
  cpf         String
  phone       String
  startDate   DateTime?
  endDate     DateTime?
  status      Status    @default(ACTIVE)
  relation    String?
  comments    String?   @db.VarChar(1000)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  visitorType   VisitorType @relation(fields: [visitorTypeId], references: [visitorTypeId])
  visitorTypeId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  scheduling   Scheduling[]
  access       Access[]
  visitorGroup VisitorGroup[]
}

model Scheduling {
  schedulingId Int      @id @default(autoincrement())
  reason       String
  location     String
  startDate    DateTime
  endDate      DateTime
  comments     String?  @db.VarChar(1000)
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  visitor   Visitor @relation(fields: [visitorId], references: [visitorId])
  visitorId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model Access {
  accessId  Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  local     String?
  reason    String?
  comments  String?   @db.VarChar(1000)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int

  visitor   Visitor @relation(fields: [visitorId], references: [visitorId])
  visitorId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model LobbyProblem {
  lobbyProblemId Int      @id @default(autoincrement())
  title          String
  description    String   @db.VarChar(1000)
  date           DateTime
  status         Status   @default(ACTIVE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model LobbyCalendar {
  lobbyCalendarId Int      @id @default(autoincrement())
  date            DateTime
  description     String   @db.VarChar(1000)

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int
}

model DeviceModel {
  deviceModelId Int    @id @default(autoincrement())
  model         String
  brand         String
  description   String @db.VarChar(500)
  isFacial      String @default("true")

  device Device[]
}

model Device {
  deviceId    Int     @id @default(autoincrement())
  name        String
  ip          String?
  ramal       Int?
  login       String?
  password    String?
  description String  @db.VarChar(1000)
  status      Status  @default(ACTIVE)

  deviceModel   DeviceModel @relation(fields: [deviceModelId], references: [deviceModelId])
  deviceModelId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int
}

model Logging {
  logId     Int      @id @default(autoincrement())
  date      DateTime @default(now())
  method    String
  url       String
  userAgent String

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model Feedback {
  feedbackId Int      @id @default(autoincrement())
  name       String?
  subject    String
  message    String   @db.VarChar(1000)
  response   String?  @db.VarChar(1000)
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  date           DateTime
  title          String
  message        String   @db.VarChar(1000)
  status         Status   @default(ACTIVE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SchedulingList {
  schedulingListId Int      @id @default(autoincrement())
  description      String   @db.VarChar(2000)
  url              String?  @db.VarChar(255)
  status           Status   @default(ACTIVE)
  createdAt        DateTime @default(now())
  UpdatedAt        DateTime @updatedAt

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int
}

model TimeZone {
  timeZoneId Int    @id @default(autoincrement())
  name       String

  lobbyId Int

  lobby Lobby @relation(fields: [lobbyId], references: [lobbyId])

  timeSpan           TimeSpan[]
  AccessRuleTimeZone AccessRuleTimeZone[]
}

model TimeSpan {
  timeSpanId Int @id @default(autoincrement())
  start      Int
  end        Int
  sun        Int
  mon        Int
  tue        Int
  wed        Int
  thu        Int
  fri        Int
  sat        Int
  hol1       Int
  hol2       Int
  hol3       Int

  lobbyId Int

  lobby Lobby @relation(fields: [lobbyId], references: [lobbyId])

  timeZone   TimeZone @relation(fields: [timeZoneId], references: [timeZoneId])
  timeZoneId Int
}

model ControllerBrand {
  controllerBrandId Int     @id @default(autoincrement())
  name              String
  iconUrl           String?

  lobby Lobby[]
}

model AccessRule {
  accessRuleId Int    @id @default(autoincrement())
  name         String
  type         Int
  priority     Int

  lobbyId Int

  lobby Lobby @relation(fields: [lobbyId], references: [lobbyId])

  GroupAccessRule    GroupAccessRule[]
  AccessRuleTimeZone AccessRuleTimeZone[]
  AreaAccessRule     AreaAccessRule[]
}

model Group {
  groupId Int    @id @default(autoincrement())
  name    String

  lobbyId Int

  lobby Lobby @relation(fields: [lobbyId], references: [lobbyId])

  MemberGroup     MemberGroup[]
  GroupAccessRule GroupAccessRule[]
  VisitorGroup    VisitorGroup[]
}

model MemberGroup {
  memberGroupId Int @id @default(autoincrement())
  memberId      Int
  groupId       Int

  member Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  group  Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

model VisitorGroup {
  visitorGroupId Int @id @default(autoincrement())
  visitorId      Int
  groupId        Int

  visitor Visitor @relation(fields: [visitorId], references: [visitorId], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

model GroupAccessRule {
  groupAccessRuleId Int @id @default(autoincrement())
  accessRuleId      Int
  groupId           Int

  accessRule AccessRule @relation(fields: [accessRuleId], references: [accessRuleId], onDelete: Cascade)
  group      Group      @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

model AccessRuleTimeZone {
  accessRuleTimeZoneId Int @id @default(autoincrement())
  accessRuleId         Int
  timeZoneId           Int

  accessRule AccessRule @relation(fields: [accessRuleId], references: [accessRuleId], onDelete: Cascade)
  timeZone   TimeZone   @relation(fields: [timeZoneId], references: [timeZoneId], onDelete: Cascade)
}

model AreaAccessRule {
  // Lobby - Access Rule
  areaAccessRuleId Int @id @default(autoincrement())
  areaId           Int
  accessRuleId     Int

  lobby      Lobby      @relation(fields: [areaId], references: [lobbyId], onDelete: Cascade)
  accessRule AccessRule @relation(fields: [accessRuleId], references: [accessRuleId], onDelete: Cascade)
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserType {
  USER
  ADMIN
}

enum LobbyType {
  CONDOMINIUM
  COMPANY
}

enum MemberType {
  RESIDENT
  EMPLOYEE
}
